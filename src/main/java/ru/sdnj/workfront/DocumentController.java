package ru.sdnj.workfront;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController()
public class DocumentController {
	private static final int defaultMaxCount = 100;

	private static final Map<String, DocumentResponse> docs = new HashMap<>();
	static {
		String type = "folder";
		for (int i = 0; i < 10; i++) {
			docs.put("" + i, initDoc("" + i, type));
		}
		type = "file";
		for (int i = 10; i < 20; i++) {
			docs.put("" + i, initDoc("" + i, type));
		}
	}

	private static DocumentResponse initDoc(String id, String type) {
		DocumentResponse doc = new DocumentResponse();
		doc.setId(id);
		doc.setTitle("Title" + id);
		doc.setViewLink("viewUrl" + id);
		doc.setDownloadLink("downloadUrl" + id);
		doc.setKind(type);
		doc.setMimeType("text/html");
		doc.setModifiedDate(Calendar.getInstance());
		doc.setSize(Calendar.getInstance().get(Calendar.SECOND));
		return doc;
	}

	/**
	 * Find a document from persistent store (linked document)
	 * 
	 * @param id
	 *            Document id. Not required. If missing will try to get all
	 *            documents from database
	 * @return Metadata in response
	 */
	@RequestMapping(value = "/rest/api/documents", method = RequestMethod.GET)
	public DocumentListResponse findAllDocuments(@RequestParam(value = "id", required = false) String id) {
		DocumentListResponse list = new DocumentListResponse();

		return list;
	}

	/**
	 * Get document metadata based on document id.
	 * 
	 * @param documentId
	 *            Unique document identification generated by the app. Required
	 *            for the api.
	 * @return document metadata in response.
	 */
	@RequestMapping(value = "/rest/api/metadata", method = RequestMethod.GET)
	public DocumentResponse getMetadata(@RequestParam(value = "id", required = true) String id) {
		DocumentResponse doc = docs.get(id);

		return doc;
	}

	/**
	 * Get a list of files and folders.
	 * 
	 * @param parentID
	 *            The folder ID to which documents should be gotten from. It's
	 *            not required parameter. If no data provided, root folder will
	 *            be used.
	 * @param max
	 *            Maximum number of returned items. Not required. If not
	 *            provided, defaultMaxCount (100) will be used.
	 * @param offset
	 *            Starting offset of documents to retrieve. Not required.
	 *            Default to 0 as starting offset.
	 * @return An array of document metadata
	 */
	@RequestMapping(value = "/rest/api/files", method = RequestMethod.GET)
	public List<DocumentResponse> getFiles(@RequestParam(value = "parentId", required = false) String parentID,
			@RequestParam(value = "max", required = false) Integer max,
			@RequestParam(value = "offset", required = false) Integer offset) {
		List<DocumentResponse> items = new ArrayList<DocumentResponse>();
		items.addAll(docs.values());
		return items;
	}

}
